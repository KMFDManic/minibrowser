STATIC_LINKING := 0
AR             := ar

ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
   platform = win
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   platform = osx
else ifneq ($(findstring win,$(shell uname -a)),)
   platform = win
endif
endif

# system platform
system_platform = unix
ifeq ($(shell uname -a),)
	EXE_EXT = .exe
	system_platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
	system_platform = osx
	arch = intel
ifeq ($(shell uname -p),powerpc)
	arch = ppc
endif
else ifneq ($(findstring MINGW,$(shell uname -a)),)
	system_platform = win
endif

TARGET_NAME := minibrowser

ifeq ($(ARCHFLAGS),)
ifeq ($(archs),ppc)
   ARCHFLAGS = -arch ppc -arch ppc64
else
   ARCHFLAGS = -arch i386 -arch x86_64
endif
endif

ifeq ($(platform), osx)
ifndef ($(NOUNIVERSAL))
   CXXFLAGS += $(ARCHFLAGS)
   LFLAGS += $(ARCHFLAGS)
endif
endif

ifeq ($(STATIC_LINKING), 1)
EXT := a
endif

ifeq ($(platform), unix)
	EXT ?= so
   TARGET := $(TARGET_NAME)_libretro.$(EXT)
   fpic := -fPIC
   SHARED := -shared -Wl,--version-script=link.T# -Wl,--no-undefined
else ifeq ($(platform), linux-portable)
   TARGET := $(TARGET_NAME)_libretro.$(EXT)
   fpic := -fPIC -nostdlib
   SHARED := -shared -Wl,--version-script=link.T
else ifneq (,$(findstring osx,$(platform)))
   TARGET := $(TARGET_NAME)_libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
else ifneq (,$(findstring ios,$(platform)))
   TARGET := $(TARGET_NAME)_libretro_ios.dylib
	fpic := -fPIC
	SHARED := -dynamiclib

ifeq ($(IOSSDK),)
   IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
endif

	DEFINES := -DIOS
	CXX = cc -arch armv7 -isysroot $(IOSSDK)
ifeq ($(platform),ios9)
CXX     += -miphoneos-version-min=8.0
CXXFLAGS += -miphoneos-version-min=8.0
else
CXX     += -miphoneos-version-min=5.0
CXXFLAGS += -miphoneos-version-min=5.0
endif
else ifneq (,$(findstring qnx,$(platform)))
	TARGET := $(TARGET_NAME)_libretro_qnx.so
   fpic := -fPIC
   SHARED := -shared -Wl,--version-script=link.T -Wl,--no-undefined
else ifeq ($(platform), emscripten)
   TARGET := $(TARGET_NAME)_libretro_emscripten.bc
   fpic := -fPIC
   SHARED := -shared -Wl,--version-script=link.T -Wl,--no-undefined
else ifeq ($(platform), vita)
   TARGET := $(TARGET_NAME)_vita.a
   CXX = arm-vita-eabi-g++
   AR = arm-vita-eabi-ar
   CXXFLAGS += -Wl,-q -O3
	STATIC_LINKING = 1
else
   CXX = g++
   TARGET := $(TARGET_NAME)_libretro.dll
   SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=link.T -Wl,--no-undefined
endif

XLIB         = /usr/lib/x86_64-linux-gnu
QTSRC        = /home/bp/Qt/minimal/no-opengl/qt-everywhere-opensource-src-5.5.1
QTDIR        = /usr/local/Qt-static-nongl-5.5.1
QTLIBDIR     = $(QTDIR)/lib
QTINCDIR     = $(QTDIR)/include
QTPLAT       = $(QTDIR)/plugins/platforms
WKITLIB      = $(QTSRC)/qtwebkit/Source/WebKit
WCORELIB     = $(QTSRC)/qtwebkit/Source/WebCore
JSCORELIB    = $(QTSRC)/qtwebkit/Source/JavaScriptCore
WTFLIB       = $(QTSRC)/qtwebkit/Source/WTF
LEVELDBLIB   = $(QTSRC)/qtwebkit/Source/ThirdParty/leveldb

CXXFLAGS += -I. -I$(QTDIR)/include -I$(QTDIR)/include/QtWebKitWidgets -I$(QTDIR)/include/QtWebKit -I$(QTDIR)/include/QtWidgets -I$(QTDIR)/include/QtCore -I$(QTDIR)/include/QtGui
CXXFLAGS += -DQT_NO_DEBUG -DQT_WEBKITWIDGETS_LIB -DQT_WEBKIT_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB
CXXFLAGS += -pipe -Wall -W -D_REENTRANT

#-I. -I/usr/local/Qt-static-nongl-5.5.1/include -I/usr/local/Qt-static-nongl-5.5.1/include/QtWebKitWidgets -I/usr/local/Qt-static-nongl-5.5.1/include/QtWebKit -I/usr/local/Qt-static-nongl-5.5.1/include/QtWidgets -I/usr/local/Qt-static-nongl-5.5.1/include/    QtGui -I/usr/local/Qt-static-nongl-5.5.1/include/QtNetwork -I/usr/local/Qt-static-nongl-5.5.1/include/QtCore -I. -I/usr/local/Qt-static-nongl-5.5.1/mkspecs/linux-g++

LDFLAGS += libminibrowser.a $(QTPLAT)/libqoffscreen.a $(QTLIBDIR)/libQt5PlatformSupport.a $(XLIB)/libfontconfig.a libs/libfreetype.a -ludev libs/libz.a $(QTLIBDIR)/libQt5PrintSupport.a $(QTLIBDIR)/libQt5WebKitWidgets.a -Wl,--whole-archive $(QTLIBDIR)/libQt5WebKit.a $(WKITLIB)/libWebKit1.a $(WCORELIB)/libWebCore.a $(LEVELDBLIB)/libleveldb.a $(JSCORELIB)/libJavaScriptCore.a $(WTFLIB)/libWTF.a -Wl,--no-whole-archive libs/libxml2.a libs/libgio-2.0.a -Wl,--whole-archive libs/libgstapp-1.0.a libs/libgstplayback.a libs/libgstpbutils-1.0.a libs/libgstvideo-1.0.a libs/libgstaudio-1.0.a libs/libgstbase-1.0.a libs/libgstreamer-1.0.a libs/libgstlibav.a libs/libgsttypefindfunctions.a libs/libgstisomp4.a libs/libgstvideoparsersbad.a libs/libgstaudioparsers.a libs/libgstpulse.a libs/libgstvideofilter.a libs/libgstvideoconvert.a libs/libgstvideoscale.a libs/libgstdeinterlace.a libs/libgstvolume.a libs/libgstaudioconvert.a libs/libgstaudioresample.a libs/libgstcoreelements.a libs/libgstdebugutilsbad.a libs/libgstaudiofx.a libs/libgstfft-1.0.a libs/libgstautodetect.a libs/libgstriff-1.0.a libs/libgstrtp-1.0.a libs/libgstcodecparsers-1.0.a libs/libavcodec-ffmpeg.a libs/libavdevice-ffmpeg.a libs/libavfilter-ffmpeg.a libs/libavformat-ffmpeg.a libs/libavresample-ffmpeg.a libs/libavutil-ffmpeg.a libs/libpostproc-ffmpeg.a libs/libswresample-ffmpeg.a libs/libswscale-ffmpeg.a -Wl,--no-whole-archive libs/libgobject-2.0.a libs/libgmodule-2.0.a libs/libgthread-2.0.a libs/libglib-2.0.a libs/libsqlite3.a $(QTLIBDIR)/libQt5Sensors.a $(QTLIBDIR)/libQt5Positioning.a $(QTLIBDIR)/libQt5Sql.a $(QTLIBDIR)/libQt5Widgets.a $(QTLIBDIR)/libQt5Gui.a $(QTLIBDIR)/libqtharfbuzzng.a $(QTLIBDIR)/libQt5Network.a libs/libssl.a libs/libcrypto.a $(QTLIBDIR)/libQt5Core.a libs/libicui18n.a libs/libicuuc.a libs/libicudata.a $(QTLIBDIR)/libqtpcre.a libs/libpcre.a -lm -ldl -lrt -lpthread

ifeq ($(platform), win)
LDFLAGS += -lws2_32
endif

ifeq ($(DEBUG), 1)
   CXXFLAGS += -O0 -g
else
   CXXFLAGS += -O3
endif

OBJECTS :=  libretro.o

#CXXFLAGS += -pedantic $(fpic)
CXXFLAGS += $(fpic)

ifneq (,$(findstring qnx,$(platform)))
CXXFLAGS += -Wc,-std=c++11
else
CXXFLAGS += -std=c++11
endif

ifneq ($(SANITIZER),)
    CFLAGS   := -fsanitize=$(SANITIZER) $(CFLAGS)
    CXXFLAGS := -fsanitize=$(SANITIZER) $(CXXFLAGS)
    LDFLAGS  := -fsanitize=$(SANITIZER) $(LDFLAGS)
endif

all: $(TARGET)

$(TARGET): $(OBJECTS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJECTS)
else
	$(CXX) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS) $(LDFLAGS)
endif

%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

clean:
	rm -f $(OBJECTS) $(TARGET)

.PHONY: clean

